/**********************************************************************
 * DO NOT CHANGE THIS FILE                                            *
 * DO NOT USE JENKINS BLUE OCEAN EDITOR TO EDIT THE PIPELINE          *
 * RDM - config.sportsnet.ca - AWS CodeDeploy Version (Golang)        *
 **********************************************************************/

pipeline {

  agent {
    node {
      label 'available'
      customWorkspace "/tmp/api-in-go/${BRANCH_NAME}"
    }
  }

  // The options directive is for configuration that applies to the whole job.
  options {
    // Only keep the most recent builds.
    buildDiscarder(logRotator(artifactNumToKeepStr: '30', numToKeepStr: '30'))
    // This build doesn't hang forever. Time it out after an hour.
    timeout(time: 60, unit: 'MINUTES')
    // Disallow concurrent executions of the Pipeline. It is useful for preventing simultaneous accesses to shared resources, etc.
    disableConcurrentBuilds()
    // Prepend all console output generated by the Pipeline run with the time at which the line was emitted.
    timestamps()
  }

  environment {
    // Settings - Repository and Directories
    RDMI_SETTINGS_IDENTIFIER_REPO = 'https://github.com/digitalmedia/rdm-jenkins-pipeline-settings.git'
    RDMI_LIBRARY_IDENTIFIER_GITHUB_CREDENTIALS_ID = 'rdm-spn-deploy-jenkins'
    RDMI_CONFIG_FILE_ROOT = "/tmp/jenkins-pipeline-settings/spn/config.sportsnet.ca/${BRANCH_NAME}"
    RDMI_CONFIG_FILE_APP_ROOT = "${RDMI_CONFIG_FILE_ROOT}/aws/spn/config.sportsnet.ca"
    // Settings - Files
    RDMI_CONFIG_FILE_BRANCH = '*/master'
    RDMI_CONFIG_FILE_GLOBAL = "${RDMI_CONFIG_FILE_ROOT}/global/global.groovy"
    RDMI_CONFIG_FILE_APP_GLOBAL = "${RDMI_CONFIG_FILE_APP_ROOT}/global.groovy"
    RDMI_CONFIG_FILE_APP_BRANCH = "${RDMI_CONFIG_FILE_APP_ROOT}/${BRANCH_NAME}.groovy"
    // Other
    RDMI_TEAMS_WEBHOOKS = credentials('RDMI_TEAMS_WEBHOOKS_SPN')
  }

  stages {
    stage('Checkout') {
      steps {
        // Settings
        script {
          sh(script: "rm -rf ${RDMI_CONFIG_FILE_ROOT}", label: "Clean previous settings")
        }
        echo('Loading settings')
        dir(RDMI_CONFIG_FILE_ROOT) {
          checkout(
            changelog: false,
            poll: false,
            scm: [
            $class: 'GitSCM', branches: [[name: RDMI_CONFIG_FILE_BRANCH]],
            userRemoteConfigs: [[
              url: RDMI_SETTINGS_IDENTIFIER_REPO,
              credentialsId: RDMI_LIBRARY_IDENTIFIER_GITHUB_CREDENTIALS_ID]]
          ])
        }
        load RDMI_CONFIG_FILE_GLOBAL
        load RDMI_CONFIG_FILE_APP_GLOBAL
        load RDMI_CONFIG_FILE_APP_BRANCH

        // Load shared libraries
        script {
          if (RDMI_LIBRARY_BRANCH?.trim() && RDMI_LIBRARY_IDENTIFIER_REPO?.trim() && RDMI_LIBRARY_IDENTIFIER_GITHUB_CREDENTIALS_ID?.trim()) {
            def identifierName = 'shared-library@' + RDMI_LIBRARY_BRANCH
            library identifier: identifierName, changelog: false, retriever: modernSCM(
              [$class: 'GitSCMSource',
              remote: RDMI_LIBRARY_IDENTIFIER_REPO,
              credentialsId: RDMI_LIBRARY_IDENTIFIER_GITHUB_CREDENTIALS_ID])
          }
          else {
            error('Please fill the required environment variables')
          }
        }

        // Send Teams notifications
        generalNotifyTeams('STARTED')
      }
      post {
        failure {
          // Send notifications to Teams (shared libraries are not avaiable at this stage)
          script {
            generalMessage = 'Pipeline failed during checkout stage'
            def facts = [[name: "BuildStatus", template: "FAILED"],[name: "Repository", template: "<a href=\"${env.RDMI_GITHUB_URL}\">${RDMI_REPOSITORY}</a>"],[name: "Branch", template: "<a href=\"${env.RDMI_GITHUB_URL}/tree/${env.BRANCH_NAME}\">${env.BRANCH_NAME}</a>"]]
            office365ConnectorSend(webhookUrl: env.RDMI_TEAMS_WEBHOOKS, color: '#FF0000', factDefinitions: facts, message: "$generalMessage")
          }
        }
      }
    }

    stage('Build') {
      steps {
        // Build revision
        awsBuildGoLangCodeDeployRevision()

      }
    }

    stage('Setup') {
      steps {
        // Configure revision
        awsConfigureCodeDeployRevision()
      }
    }

    stage('Deployment Approval'){
      steps {
        // Deployment approval
        generalPipelineApproval(RDMI_PIPELINE_APPROVAL)
      }
    }

    stage('Deploy') {
      steps {
        // Call CodeDeploy
        awsCodeDeployPublisher()
      }
    }

    stage('Post Deploy') {
      steps {
        // Run REDIS flushdb in a specific database
        databaseRedisFlushCustomCommand()
        // Notify new relic
        generalNotifyNewRelic()
      }
    }

    stage('QA Tests') {
      steps {
        // Run QA post tests
        postTestQAEndtest(RDMI_QA_ENDTEST_STATUS)
      }
    }
  }

  // Pipeline post
  post {
    success {
      // Send Teams notifications
      generalNotifyTeams('SUCCESSFUL')
    }
    aborted {
      // Send Teams notifications
      generalNotifyTeams('ABORTED')
    }
    failure {
      // Send Teams notifications
      generalNotifyTeams('FAILED')
    }
    always {
      // Wipe out the jenkins workspace before finish
      deleteDir()
    }
  }
}
